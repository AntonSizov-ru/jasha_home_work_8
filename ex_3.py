from random import randint
from time import time

list_len = [1000, 2000, 5000, 10000]


def random_generate(length):

    x = []
    for i in range(1, length):
        x.append(randint(1, length))
    return x


for a in list_len:
    random_list = random_generate(a)


    def selection_sort(input_list):

        start_time = time()  # время старта функции
        for i in range(len(input_list)):
            min_i = i
            for j in range(i + 1, len(input_list)):
                if input_list[min_i] > input_list[j]:
                    min_i = j
                input_list[i], input_list[min_i] = input_list[min_i], input_list[i]
        return time() - start_time  # время выполнения в секундах


    print(f'Размер списка - {a}, время сортировки этого списка - {selection_sort(random_list)}.')


'''
    Ответ на вопрос "Какой вывод вы можете сделать по результатам работы программы?": С увеличением длины списка время
    затраченное на сортировку списка увеличивается в геометрической прогрессии. Я пробовал добавить в список длин 
    сортируемого списка длину в 4000 элементов
    0.196/0.049 ~ 4 (196/49 = 4, но так как в выводе время указано с большей точностью, я использовал знак 
                     приблизительно равно)
    1.234/0.196 ~ 6.3 
    5.564/1.234 ~ 4.5
    Я пробовал добавить в список длин сортируемого списка длину в 4000 элементов, тогда разница между 2к и 4к списками
    была приблизительно равна 4.15
    
    Результаты на моём ПК:
        Размер списка - 1000, время сортировки этого списка - 0.049866676330566406.
        Размер списка - 2000, время сортировки этого списка - 0.19647479057312012.
        Размер списка - 5000, время сортировки этого списка - 1.23469877243042.
        Размер списка - 10000, время сортировки этого списка - 5.564122200012207.
'''